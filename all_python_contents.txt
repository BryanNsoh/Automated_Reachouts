

# Contents of copy_all_code.py
import os


def copy_py_to_txt(output_file):
    with open(output_file, "w") as outfile:
        for filename in os.listdir("."):
            if filename.endswith(".py"):
                with open(filename, "r") as infile:
                    outfile.write(f"\n\n# Contents of {filename}\n")
                    outfile.write(infile.read())


def main():
    output_filename = "all_python_contents.txt"
    copy_py_to_txt(output_filename)
    print(f"All .py file contents copied to {output_filename}")


if __name__ == "__main__":
    main()


# Contents of email_crafter.py
from typing import Dict
import google.generativeai as genai
from prompts import student_email_advice, professor_email_advice
import json


class EmailCrafter:
    """
    Crafts an email based on the search results and student preferences.
    """

    def __init__(self, model):
        self.model = model

    def generate_email(self, prompt: str) -> str:
        # Generating the email using the Gemini Pro model
        return self.model.generate_content(prompt)

        # Generating the email using the Gemini Pro model
        return self.model.generate_content(prompt)

    def craft_email(self, student_info: Dict, professor_info: Dict) -> str:
        # Prompt 1: Student generates the initial email draft
        prompt_1 = (
            f"Write an email as a student reaching out to a professor. \n"
            f"Student Information: {json.dumps(student_info)}\n"
            f"Professor Information: {professor_info.get('Employee', 'N/A')}, {professor_info.get('Position', 'N/A')}, {professor_info.get('Department', 'N/A')}\n"
            f"Search Results: {professor_info.get('Result_1', 'N/A')}, {professor_info.get('Result_2', 'N/A')}, {professor_info.get('Result_3', 'N/A')}\n"
            f"Student advice: {student_email_advice}\n"
            f"Email (formatted in markdown):\n"
        )

        initial_draft = self.generate_email(prompt_1)
        print("Initial draft:", initial_draft.text)

        # Prompt 2: Professor reviews the draft and provides feedback
        prompt_2 = f"{professor_email_advice} \n\n{initial_draft.text}\n"
        professor_feedback = self.generate_email(prompt_2)
        print("Professor feedback:", professor_feedback.text)

        # Prompt 3: Student refines the email based on the professor's feedback
        prompt_3 = (
            f"Refine the following email draft based the professor's feedback and the provided advice. \n"
            f"Professor's Feedback: {professor_feedback.text}\n"
            f"Student advice: {student_email_advice}\n"
            f"Student Email:{initial_draft.text}\n"
            f"Searched Results: {professor_info.get('Result_1', 'N/A')}, {professor_info.get('Result_2', 'N/A')}, {professor_info.get('Result_3', 'N/A')}\n"
            "NB: This is the final email that will be sent to the professor. Do not include any comments, placeholders or notes. Do the best with what you have."
            "Refined Email(formatted in markdown):"
        )
        refined_email = self.generate_email(prompt_3)
        print("Refined email:", refined_email.text)

        return refined_email.text


# Contents of email_sender.py
from __future__ import print_function
import sib_api_v3_sdk
from sib_api_v3_sdk.rest import ApiException
from markdown2 import markdown
import json

# Read API keys
key_path = r"C:\Users\bnsoh2\OneDrive - University of Nebraska-Lincoln\Documents\keys\api_keys.json"
with open(key_path) as f:
    api_keys = json.load(f)
    BREVO_API_KEY = api_keys["BREVO_API_KEY"]


class BrevoEmailSender:
    def __init__(self, api_key):
        configuration = sib_api_v3_sdk.Configuration()
        configuration.api_key["api-key"] = api_key
        self.api_instance = sib_api_v3_sdk.TransactionalEmailsApi(
            sib_api_v3_sdk.ApiClient(configuration)
        )

    def send_email(self, html_data):
        for item in html_data:
            if item.get("Sent", 0) == 0:
                Contact = item.get("Contact")
                html_content = item.get("Email_To_Send", "")

                sender = {"email": "mamboanye6@gmail.com"}
                to = [{"email": Contact}]
                subject = "Your Email Subject"
                send_smtp_email = sib_api_v3_sdk.SendSmtpEmail(
                    to=to, html_content=html_content, sender=sender, subject=subject
                )

                try:
                    api_response = self.api_instance.send_transac_email(send_smtp_email)
                    print("Email sent successfully: ", api_response)
                    item["Sent"] = 1  # Update 'Sent' status on success
                except ApiException as e:
                    print(
                        "Exception when calling SMTPApi->send_transac_email: %s\n" % e
                    )

    def _extract_markdown_content(self, data_item):
        markdown_content = ""
        # extract markdown content from data_item dictionary with key "Email_To_Send"
        markdown_content = data_item.get("Email_To_Send", None)
        return markdown_content


if __name__ == "__main__":
    brevo_email_sender = BrevoEmailSender(BREVO_API_KEY)

    markdown_data = [
        # Sample data structure
        {
            "Contact": "bryan.anye.5@gmail.com",
            "Email_To_Send": """
            <!DOCTYPE html>
            <html>
            <head>
            </head>
            <body>
                <p>Dear Professor XXXX,</p>

                <p>My name is Raman Dutt, a graduate of XXXX University <a href="http://www.example.com">insert URL</a>. <strong>I am currently working</strong> as a research associate at HITI Lab <a href="http://www.example.com">insert URL</a> at Emory University with Professor A <a href="http://www.example.com">insert URL</a> and Professor B <a href="http://www.example.com">insert URL</a>. <strong>My research includes applications of deep learning for medical image analysis, with a special focus on domain adaptation and transfer learning</strong> . I have read your <strong>intriguing work</strong> on medical image analysis (such as <a href="http://www.example.com">URL</a> and <a href="http://www.example.com">URL</a>) and <strong>I am highly motivated to pursue</strong> an MS/ PhD in Artificial Intelligence. Here are a few questions -</p>
                
                <ul>
                    <li>Are you looking for new graduate students for Fall'21?</li>
                    <li>Which department should I apply to be able to best work in your lab?</li>
                    <li>What qualities/ skills do you prefer in a student?</li>
                </ul>

                <p><strong>I've attached my resume</strong> to give you more information about my background.</p>

                <p>Thank you for your consideration!</p>

                <p>Sincerely,<br>Raman Dutt <a href="http://www.example.com">URL to personal website/ Google scholar/ Github/ etc</a></p>
            </body>
            </html>

            """,
            "Result_1": "Content 1",
            "Sent": 0,
        },
        # Add more items as needed...
    ]

    brevo_email_sender.send_email(markdown_data)

    # Print updated markdown_data to check 'Sent' status
    print("Updated Data: ", markdown_data)


# Contents of main.py
import json
from professor_data_handler import ProfessorDataHandler, DatabaseSetupManager
from query_generator import QueryGenerator
from search_executor import SearchExecutor
from email_crafter import EmailCrafter
from email_sender import BrevoEmailSender
from prompts import student_info
import google.generativeai as genai


def main():
    """
    Main function orchestrating the overall process from generating search queries to crafting emails.

    Process:
        1. Reads professor data from the database.
        2. For each professor record, generates search queries based on student interests.
        3. Executes these queries and retrieves results.
        4. Crafts an email based on search results and student preferences, and stores it in the professor record under 'Email'.
        5. Sends the email to the professor.
        6. Updates the database with the modified professor record.
    """

    # Read API keys
    key_path = r"C:\Users\bnsoh2\OneDrive - University of Nebraska-Lincoln\Documents\keys\api_keys.json"
    with open(key_path) as f:
        api_keys = json.load(f)
        GEMINI_API_KEY = api_keys["GEMINI_API_KEY"]
        PERPLEXITY_API_KEY = api_keys["PERPLEXITY_API_KEY"]
        BREVO_API_KEY = api_keys["BREVO_API_KEY"]

    # Initialize the Google Gemini Pro model
    genai.configure(api_key=GEMINI_API_KEY)
    gemini_model = genai.GenerativeModel("gemini-pro")

    # Initialize the DatabaseSetupManager and set up the database path
    db_manager = DatabaseSetupManager("professors_db_template.db")
    db_path = db_manager.select_or_create_database_folder()

    # Initialize ProfessorDataHandler with the new database path
    table_name = "professors"
    data_handler = ProfessorDataHandler(str(db_path), table_name)

    # Initialize other classes
    query_gen = QueryGenerator(gemini_model)
    search_exec = SearchExecutor(PERPLEXITY_API_KEY)
    email_crafter = EmailCrafter(gemini_model)
    email_sender = BrevoEmailSender(BREVO_API_KEY)

    # Process each professor record
    professor_records = data_handler.read_professor_data()
    professor_records = [x for x in professor_records if x.get("Sent", 0) == 0]

    for record in professor_records:
        # Get and execute search queries
        updated_record = query_gen.use_predefined_query(record)
        print("Queries generated for", updated_record["Employee"])
        updated_record = search_exec.perform_search(updated_record)
        print("Queries executed for", updated_record["Employee"])

        # Craft email
        email_body = email_crafter.craft_email(student_info, updated_record)
        email_sender.send_email(email_body)
        updated_record["Email_To_Send"] = email_body

        # print(email_body)
        print("Email crafted for", updated_record["Employee"])

        # Update database
        data_handler.update_database(updated_record)


if __name__ == "__main__":
    main()


# Contents of professor_data_handler.py
import pandas as pd
import sqlite3
from typing import List, Dict


class ProfessorDataHandler:
    def __init__(self, db_path: str, table_name: str):
        self.db_path = db_path
        self.table_name = table_name

    def read_professor_data(self) -> List[Dict]:
        with sqlite3.connect(self.db_path) as conn:
            df = pd.read_sql(f"SELECT * FROM {self.table_name}", conn)
        return df.to_dict(orient="records")

    def update_database(self, professor_record: Dict) -> None:
        with sqlite3.connect(self.db_path) as conn:
            placeholders = ", ".join([f"{key} = ?" for key in professor_record])
            values = list(professor_record.values())
            query = f"UPDATE {self.table_name} SET {placeholders} WHERE Employee = ?"
            conn.execute(query, values + [professor_record["Employee"]])
            conn.commit()


# Contents of prompts.py
# Information about the student
student_info = {
    "Name": "Mary Mambo",
    "Gender": "Female",
    "Date of Birth": "03/03/1997",
    "Nationality": "Cameroonian",
    "Contact": {"Phone": "+237676292112", "Email": "mambomary33@gmail.com"},
    "Personal Statement": "A result-driven young professional with interest in food and development economics. Motivated by the need to address economic development crises in developing countries by examining cultural and political institutions and their impact on ordinary people worldwide. A development enthusiast focused on bridging the gap between research findings and practical applications.",
    "Education": {
        "Postgraduate": {
            "Degree": "MSc Economics Science",
            "University": "University of Bamenda",
            "Grade": "Very Good",
            "Year Graduated": 2019,
        },
        "Undergraduate": {
            "Degree": "BSc Economics Science",
            "University": "University of Buea",
            "Grade": "Very Good",
            "Year Graduated": 2016,
        },
        "Teacher Diploma": {
            "Degree": "DIPET 1 (Teacher diploma of technical education first degree)",
            "Institution": "Higher Technical Teachers’ Training College Bambili",
            "Grade": "Very Good",
            "Year Completed": 2019,
        },
        "Secondary Education": {
            "Qualification": "General Certificate of Education (Advanced and Ordinary Levels)",
            "School": "Government High School, Bokwaongo-Buea",
            "Year Completed": 2013,
        },
        "Primary Education": {
            "Qualification": "First School Leaving Certificate",
            "School": "Catholic School Buea Station",
            "Year Completed": 2006,
        },
    },
    "Further Education": {
        "Course": "Introduction to Gender Based Violence Eradication Platforms in Schools",
        "Organization": "United Nations for Children Fund (UNICEF)",
        "Year": 2023,
        "Impact": "Specialized in service delivery, enabling environment, and emergency response against gender-based violence in Cameroon.",
    },
    "Work Experience": [
        {
            "Role": "Teacher",
            "Organization": "Government Technical High School, Manengole",
            "Duration": "2019-Present",
            "Responsibilities": [
                "Planned Economics, Mathematics and Management lessons",
                "Adopted various teaching methods for positive learning outcomes",
                "Enhanced social abilities and learning skills among students",
            ],
        },
        {
            "Role": "Livelihood Support Officer",
            "Organization": "Women in Action Against Gender Based Violence",
            "Duration": "2019-2020",
            "Responsibilities": [
                "Technical planning, supervision, and monitoring of public awareness activities",
                "Coordination with municipalities, authorities, and beneficiaries in Nguti community",
            ],
        },
        {
            "Role": "Marketing Intern",
            "Organization": "CAMPOST",
            "Duration": "2017-2019",
            "Responsibilities": [
                "Developing data collection tools such as surveys",
                "Collecting and analyzing data to identify consumer trends",
                "Creating graphic representations of data",
            ],
        },
    ],
    "Skills": {
        "Organizational/Managerial": ["Leadership", "Interpersonal skills"],
        "Digital": ["Office suite", "Statistical software (SPSS, STATA)"],
        "Other": [
            "Graphics design",
            "Team work",
            "Time management",
            "Adaptability",
            "Fashion designing",
        ],
    },
    "Languages": {"English": "Very Good", "French": "Good", "Ngemba": "Native"},
    "Interests": [
        "Development Economics",
        "Educational Economics",
        "Gender Studies",
        "Sustainable Development",
        "Public Policy and Administration",
        "Global Health Economics",
        "Agricultural Economics",
        "Social Research and Statistics",
        "International Relations",
        "Environmental Economics",
        "Urban and Regional Planning",
        "Social Entrepreneurship",
        "Economic Policy",
        "Human Resource Development",
        "Nonprofit Management and Leadership",
    ],
    "Additional Information": {
        "Dissertation": "Role of women empowerment in Economic Development in Cameroon",
        "Seminars": "The Role of educational planning in agricultural development",
        "Memberships": [
            "Cameroon Teachers Trade Union",
            "Youth Development Network Club",
        ],
    },
}

perplexity_system_msg = "Provide a thorough, highly detailed, nuanced and comprehensive response to the following question:"

student_email_advice = """Email Template for Reaching Out to Professors

                            Subject: Inquiry Regarding Research Opportunities in [Your Area of Interest]

                            Dear Professor XXXX,

                            [Your Introduction]
                            - Briefly introduce yourself, including your current academic or professional status. 

                            [Your current position and prior work]
                            - Mention your current role and highlight 1-2 key achievements or experiences, particularly those where you demonstrated skills in writing scientific manuscripts and proposing creative, logical research ideas.

                            [Connection to the Professor’s Work]
                            - Explain what led you to the professor's research and their group. Articulate how your research ideas link to their work, showing an understanding of relevant literature and hypotheses. Mention specific works or projects (with URLs if available) that align with your interests.

                            [Questions for the Professor]
                            - Pose 2-3 well-thought-out questions that indirectly address your real concerns, showcasing your readiness to contribute effectively to their research. For example:
                            1. Are you currently looking for new graduate students for the upcoming academic year?
                            2. Which department or program would be most suitable for someone aiming to work in your lab, considering my background and research interests?
                            3. What qualities or skills do you value most in your students, particularly in terms of research creativity and writing ability?

                            [Attachment of Resume/CV]
                            - Attach your resume or CV for a more detailed background overview, emphasizing experiences where you successfully linked your research topics to existing literature and paradigms.

                            Closing Remarks
                            - Express your understanding of the investment a faculty member makes in a graduate student and your eagerness to justify this through your contributions.

                            Warm Regards,
                            Your Name
                            [Optional: URL to personal website/Google Scholar/GitHub, etc.]

                            --------------------------------------------------------------------------------

                            Example Email

                            Dear Professor XXXX,

                            My name is Raman Dutt, a graduate of XXXX University [insert URL]. I am currently working as a research associate at HITI Lab [insert URL] at Emory University with Professor A [insert URL] and Professor B [insert URL]. My research includes applications of deep learning in medical image analysis, focusing on domain adaptation and transfer learning. I am committed to contributing to the field through innovative research and well-crafted scientific manuscripts. I have read your fascinating work on medical image analysis ([insert URLs]) and am keen to pursue an MS/PhD in Artificial Intelligence, especially in areas where I can apply my experience in linking research with established paradigms. Here are a few questions:

                            1. Are you looking for new graduate students for Fall '21?
                            2. Which department should I apply to best align with your lab's work?
                            3. What qualities/skills do you prefer in a student, especially regarding research creativity and scientific writing?

                            I've attached my resume for more details about my background and how I can contribute to your research group.

                            Thank you for considering my inquiry!

                            Sincerely,
                            Raman Dutt
                            [insert URL to personal website/Google Scholar/GitHub, etc.]
                """

professor_email_advice = """
As an experienced research professor, your task is to provide concise, actionable feedback on a student's email draft. Focus primarily on areas of improvement that can increase the likelihood of a positive response from another professor. Acknowledge the strengths of the email briefly, and then provide specific suggestions on how the student can enhance their message. Your insights should guide the student in refining their approach to be more effective and impactful. Be bluntly and brutally honest, as well as constructive.

Student's email:
"""


# Contents of query_generator.py
import json
from typing import Dict
import google.generativeai as genai


class QueryGenerator:
    def __init__(self, google_api_key: str):
        self.google_api_key = google_api_key

    def generate_search_queries(self, student_info: Dict, professor_info: Dict) -> Dict:
        # Configure the Google Gemini Pro model
        genai.configure(api_key=self.google_api_key)
        model = genai.GenerativeModel("gemini-pro")

        previous_queries = []
        for i in range(1, 6):
            # Join previous queries into a single string
            # Check if previous_queries is empty
            if previous_queries:
                all_previous_queries = ", ".join(previous_queries)
            else:
                all_previous_queries = ""

            prompt = self._prepare_prompt(
                student_info, professor_info, all_previous_queries
            )
            response = model.generate_content(prompt)
            print(f"Query {i}: {response.text}")
            professor_info[f"Search_{i}"] = response.text
            previous_queries.append(response.text)

        return professor_info

    def _generate_new_query(
        self, student_info: Dict, professor_info: Dict, previous_queries: str
    ) -> str:
        # Construct prompt based on student and professor info, including all previous queries
        print("professor_info", professor_info)
        prompt = (
            f"Professor Info: {json.dumps(professor_info)}\n"
            f"Previous Queries: {previous_queries}\n"
            "Create a search query, unique from those above, to explore the professor's research/interests in depth. Format as a question or statement, including the professor's name, position, and Campus. The query should aim to uncover detailed insights into the professor's academic contributions and interests."
            "Example 1: What are the key research areas and contributions of [professor's name], [position] in the [Department] at [Campus]?"
            "Example 2: Identify and summarize the top 3 research interests of [professor's name] at [Campus], focusing on their impact and relevance in their field."
            "Example 3: List and provide detailed summaries of the top 5 most cited papers by [professor's name] from [Campus], highlighting their significance in the academic community."
            "Your query should be direct and aimed at gathering comprehensive information about the professor's academic profile and research achievements. You are encouraged to be creative with your approach."
        )
        return prompt

    def use_predefined_query(self, professor_info: Dict) -> Dict:
        # Append predefined queries to the professor_info dictionary
        queries = [
            f"What are the key research areas and contributions of {professor_info['Employee']}, {professor_info['Position']} in the {professor_info['Department']} at {professor_info['Campus']}?",
            f"Identify and summarize the top 3 research interests of {professor_info['Employee']} at {professor_info['Campus']}, focusing on their impact and relevance in their field.",
            f"List and provide detailed summaries of the top 5 most cited papers by {professor_info['Employee']} from {professor_info['Campus']}, highlighting their significance in the academic community. Provide URLs to the papers as well as their titles.",
        ]

        # Assuming there are no existing search queries in the professor_info
        for i, query in enumerate(queries, start=1):
            professor_info[f"Search_{i}"] = query

        return professor_info


# Contents of search_executor.py
import requests
import json
from typing import Dict
from prompts import perplexity_system_msg


class SearchExecutor:
    """
    Executes search queries and retrieves the results.

    Attributes:
        perplexity_api_key (str): API key for Perplexity AI services.

    Methods:
        perform_search(professor_record: Dict) -> Dict:
            Executes search queries present in the professor record and updates the record with the results.
    """

    def __init__(self, perplexity_api_key: str):
        self.perplexity_api_key = perplexity_api_key
        self.url = "https://api.perplexity.ai/chat/completions"
        # Set the headers with the authorization and content type
        self.headers = {
            "Authorization": f"Bearer {self.perplexity_api_key}",
            "Accept": "application/json",
            "Content-Type": "application/json",
        }

    def perform_search(self, professor_record: Dict) -> Dict:
        for i in range(1, 4):  # replace 2 with 6
            search_key = f"Search_{i}"
            result_key = f"Result_{i}"
            if search_key in professor_record:
                query = professor_record[search_key]
                response = self._execute_query(query)
                professor_record[result_key] = response
        return professor_record

    def _execute_query(self, query: str) -> str:
        payload = {
            "model": "pplx-70b-online",
            "messages": [
                {
                    "role": "system",
                    "content": f"{perplexity_system_msg}",
                },
                {"role": "user", "content": query},
            ],
        }
        try:
            # Use the headers from the class attribute
            response = requests.post(self.url, json=payload, headers=self.headers)
            response.raise_for_status()
            response = json.loads(response.text)
            response = response["choices"][0]["message"]["content"]
            print(response)  # For debugging
            return response
        except requests.RequestException as e:
            print(f"Error: {e}")
