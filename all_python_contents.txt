

# Contents of copy_all_code.py
import os


def copy_py_to_txt(output_file):
    with open(output_file, "w") as outfile:
        for filename in os.listdir("."):
            if filename.endswith(".py"):
                with open(filename, "r") as infile:
                    outfile.write(f"\n\n# Contents of {filename}\n")
                    outfile.write(infile.read())


def main():
    output_filename = "all_python_contents.txt"
    copy_py_to_txt(output_filename)
    print(f"All .py file contents copied to {output_filename}")


if __name__ == "__main__":
    main()


# Contents of email_crafter.py
from typing import Dict
import google.generativeai as genai
from prompts import student_email_advice, professor_email_advice, subject_line_advice
import json


class EmailCrafter:
    """
    Crafts an email based on the search results and student preferences.
    """

    def __init__(self, model):
        self.model = model

    def generate_email(self, prompt: str) -> str:
        # Generating the email using the Gemini Pro model
        return self.model.generate_content(prompt)

    def generate_subject_line(
        self, email_body: str, student_info: Dict, professor_info: Dict
    ) -> str:
        # Craft a subject line based on email content and other information
        subject_prompt = (
            f"Craft five alternative concise and relevant email subject lines based on the following email body, student information, and professor information. \n"
            f"Email Body: {email_body}\n"
            f"Student Information: {json.dumps(student_info)}\n"
            f"Professor Information: {json.dumps(professor_info)}\n"
            f"Guidelines for subject line: {subject_line_advice}\n"
        )
        subject_lines = self.model.generate_content(subject_prompt)

        selection_prompt = (
            f"Return the single best subject line verbatim  for the email body from the following options. \n"
            f"Email Body: {email_body}\n"
            f"Subject Lines: {subject_lines.text}\n"
        )
        subject_line = self.model.generate_content(selection_prompt)

        print("Subject line:", subject_line.text)

        return subject_line.text

    def craft_email(self, student_info: Dict, professor_info: Dict) -> str:
        # Prompt 1: Student generates the initial email draft
        prompt_1 = (
            f"Write an email as a student reaching out to a professor. \n"
            f"Student Information: {json.dumps(student_info)}\n"
            f"Professor Information: {professor_info.get('Employee', 'N/A')}, {professor_info.get('Position', 'N/A')}, {professor_info.get('Department', 'N/A')}\n"
            f"Search Results: {professor_info.get('Result_1', 'N/A')}, {professor_info.get('Result_2', 'N/A')}, {professor_info.get('Result_3', 'N/A')}\n"
            f"Student advice: {student_email_advice}\n"
            f"Email (formatted in HTML. Do-not include any placeholders or urls.):\n"
        )

        initial_draft = self.generate_email(prompt_1)
        print("Initial draft:", initial_draft.text)

        # Prompt 2: Professor reviews the draft and provides feedback
        prompt_2 = f"{professor_email_advice} \n\n{initial_draft.text}\n"
        professor_feedback = self.generate_email(prompt_2)
        print("Professor feedback:", professor_feedback.text)

        # Prompt 3: Student refines the email based on the professor's feedback
        prompt_3 = (
            f"Refine the following email draft based the professor's feedback and the provided advice. \n"
            f"Professor's Feedback: {professor_feedback.text}\n"
            f"Student advice: {student_email_advice}\n"
            f"Student Email:{initial_draft.text}\n"
            f"Searched Results: {professor_info.get('Result_1', 'N/A')}, {professor_info.get('Result_2', 'N/A')}, {professor_info.get('Result_3', 'N/A')}\n"
            "NB: This is the final email that will be sent to the professor. Do not include any comments, placeholders or notes. Do the best with what you have."
            "Refined Email(formatted in HTML. Do-not include any placeholders or urls.):"
        )
        refined_email = self.generate_email(prompt_3)
        print("Refined email:", refined_email.text)

        # Generate subject line for the email
        subject_line = self.generate_subject_line(
            refined_email.text, student_info, professor_info
        )

        # Return both the email body and subject line
        return {"body": refined_email.text, "subject": subject_line}


# Contents of email_sender.py
from __future__ import print_function
import sib_api_v3_sdk
from sib_api_v3_sdk.rest import ApiException
import json
import base64

# Read API keys
key_path = r"C:\Users\bnsoh2\OneDrive - University of Nebraska-Lincoln\Documents\keys\api_keys.json"
with open(key_path) as f:
    api_keys = json.load(f)
    BREVO_API_KEY = api_keys["BREVO_API_KEY"]


class BrevoEmailSender:
    def __init__(self, api_key):
        configuration = sib_api_v3_sdk.Configuration()
        configuration.api_key["api-key"] = api_key
        self.api_instance = sib_api_v3_sdk.TransactionalEmailsApi(
            sib_api_v3_sdk.ApiClient(configuration)
        )

    def send_email(self, html_data):
        for item in html_data:
            if item.get("Sent", 0) == 0:
                contact = item.get("Contact")
                html_content = item.get("Email_To_Send", "")
                subject = item.get("Subject", "")
                sender = {"email": "mamboanye6@gmail.com"}
                to = [{"email": contact}]
                attachments = []

                # Check for attachment
                if "Attachment_Path" in item:
                    with open(item["Attachment_Path"], "rb") as file:
                        encoded_string = base64.b64encode(file.read()).decode("utf-8")
                        attachments.append(
                            {
                                "content": encoded_string,
                                "name": "Mambo-Mary-Resume.pdf",
                            }
                        )

                send_smtp_email = sib_api_v3_sdk.SendSmtpEmail(
                    to=to,
                    html_content=html_content,
                    sender=sender,
                    subject=subject,
                    attachment=attachments,
                )

                try:
                    api_response = self.api_instance.send_transac_email(send_smtp_email)
                    print("Email sent successfully: ", api_response)
                    item["Sent"] = 1  # Update 'Sent' status on success
                except ApiException as e:
                    print(
                        "Exception when calling SMTPApi->send_transac_email: %s\n" % e
                    )


if __name__ == "__main__":
    brevo_email_sender = BrevoEmailSender(BREVO_API_KEY)

    html_email = [
        # Sample data structure
        {
            "Contact": "bryan.anye.5@gmail.com",
            "Email_To_Send": """
            <!DOCTYPE html>
            <html>
            <head>
            </head>
            <body>
                <p>Dear Professor XXXX,</p>

                <p>My name is Raman Dutt, a graduate of XXXX University <a href="http://www.example.com">insert URL</a>. <strong>I am currently working</strong> as a research associate at HITI Lab <a href="http://www.example.com">insert URL</a> at Emory University with Professor A <a href="http://www.example.com">insert URL</a> and Professor B <a href="http://www.example.com">insert URL</a>. <strong>My research includes applications of deep learning for medical image analysis, with a special focus on domain adaptation and transfer learning</strong> . I have read your <strong>intriguing work</strong> on medical image analysis (such as <a href="http://www.example.com">URL</a> and <a href="http://www.example.com">URL</a>) and <strong>I am highly motivated to pursue</strong> an MS/ PhD in Artificial Intelligence. Here are a few questions -</p>
                
                <ul>
                    <li>Are you looking for new graduate students for Fall'21?</li>
                    <li>Which department should I apply to be able to best work in your lab?</li>
                    <li>What qualities/ skills do you prefer in a student?</li>
                </ul>

                <p><strong>I've attached my resume</strong> to give you more information about my background.</p>

                <p>Thank you for your consideration!</p>

                <p>Sincerely,<br>Raman Dutt <a href="http://www.example.com">URL to personal website/ Google scholar/ Github/ etc</a></p>
            </body>
            </html>

            """,
            "Subject": "Inquiry: Leveraging AI for Medical Imaging Breakthroughs - Fall 2023",
            "Sent": 0,
            "Attachment_Path": r"C:\Users\bnsoh2\OneDrive - University of Nebraska-Lincoln\Documents\Coding Projects\Automated_Reachouts\Mambo_resume.pdf",
        }
    ]

    brevo_email_sender.send_email(html_email)

    # Print updated html_smail to check 'Sent' status
    print("Updated Data: ", html_email)


# Contents of main.py
import json
from professor_data_handler import ProfessorDataHandler
from query_generator import QueryGenerator
from search_executor import SearchExecutor
from email_crafter import EmailCrafter
from email_sender import BrevoEmailSender
from prompts import student_info
import google.generativeai as genai


def main():
    """
    Main function orchestrating the overall process from generating search queries to crafting emails.

    Process:
        1. Reads professor data from the database.
        2. For each professor record, generates search queries based on student interests.
        3. Executes these queries and retrieves results.
        4. Crafts an email based on search results and student preferences, and stores it in the professor record under 'Email'.
        5. Sends the email to the professor.
        6. Updates the database with the modified professor record.
    """

    # Read API keys
    key_path = r"C:\Users\bnsoh2\OneDrive - University of Nebraska-Lincoln\Documents\keys\api_keys.json"
    with open(key_path) as f:
        api_keys = json.load(f)
        GEMINI_API_KEY = api_keys["GEMINI_API_KEY"]
        PERPLEXITY_API_KEY = api_keys["PERPLEXITY_API_KEY"]
        BREVO_API_KEY = api_keys["BREVO_API_KEY"]

    # Initialize the Google Gemini Pro model
    genai.configure(api_key=GEMINI_API_KEY)
    gemini_model = genai.GenerativeModel("gemini-pro")

    # Initialize the DatabaseSetupManager and set up the database path
    table_name = "professors"
    db_template_path = "professors_db_template.db"
    data_handler = ProfessorDataHandler(db_template_path, table_name)

    # Initialize other classes
    query_gen = QueryGenerator(gemini_model)
    search_exec = SearchExecutor(PERPLEXITY_API_KEY)
    email_crafter = EmailCrafter(gemini_model)
    email_sender = BrevoEmailSender(BREVO_API_KEY)

    # Process each professor record
    professor_records, db_path = data_handler.setup_database()
    print
    professor_records = [x for x in professor_records if x.get("Sent", 0) == 0]

    for record in professor_records:
        # Get and execute search queries
        updated_record = query_gen.use_predefined_query(record)
        print("Queries generated for", updated_record["Employee"])
        updated_record = search_exec.perform_search(updated_record)
        print("Queries executed for", updated_record["Employee"])

        # Craft email
        email_data = email_crafter.craft_email(student_info, updated_record)
        email_body = email_data["body"]
        subject_line = email_data["subject"]

        email_to_send = {
            "Contact": updated_record["Contact"],
            "Email_To_Send": email_body,
            "Subject": subject_line,
            "Attachment_Path": r"C:\Users\bnsoh2\OneDrive - University of Nebraska-Lincoln\Documents\Coding Projects\Automated_Reachouts\Mambo_resume.pdf",
            "Sent": 0,
        }

        email_sender.send_email([email_to_send])  # Send the email with the subject line

        # Update database
        full_email_content = f"Subject: {subject_line}\n\n{email_body}"
        updated_record["Email_To_Send"] = full_email_content
        updated_record["Sent"] = 1
        data_handler.update_database(updated_record, db_path)


if __name__ == "__main__":
    main()


# Contents of professor_data_handler.py
import os
import json
import shutil
import sqlite3
import pandas as pd
from typing import List, Dict


class ProfessorDataHandler:
    def __init__(self, db_template_path, table_name):
        self.db_template_path = db_template_path
        self.table_name = table_name

    def read_professor_data(self) -> List[Dict]:
        with sqlite3.connect(self.db_path) as conn:
            df = pd.read_sql(f"SELECT * FROM {self.table_name}", conn)
        return df.to_dict(orient="records")

    def update_database(self, professor_record: Dict, db_path) -> None:
        with sqlite3.connect(db_path) as conn:
            placeholders = ", ".join([f"{key} = ?" for key in professor_record])
            values = list(professor_record.values())
            query = f"UPDATE {self.table_name} SET {placeholders} WHERE Employee = ?"
            conn.execute(query, values + [professor_record["Employee"]])
            conn.commit()

    def setup_database(self) -> (List[Dict], str):
        # Get the folder name from the user
        folder_name = input("Enter the name of the folder: ")
        db_path = os.path.join(folder_name, "professors.db")

        # Check if the professors.db file exists
        if os.path.isfile(db_path):
            self.db_path = db_path
            return self.read_professor_data(), db_path

        # If professors.db does not exist, proceed with existing setup
        folder_exists = input(
            "Does the folder exist and contain professor data? (yes/no): "
        )
        if folder_exists.lower() != "yes":
            print("Folder does not exist or does not contain professor data.")
            return [], None

        if not os.path.isdir(folder_name):
            print("Folder not found in the current directory.")
            return [], None

        # Check if the JSON file exists within the folder
        json_file_path = os.path.join(folder_name, "professors.json")
        if not os.path.isfile(json_file_path):
            print("JSON file not found in the specified folder.")
            return [], None

        # Load data from the JSON file
        with open(json_file_path, "r") as file:
            data = json.load(file)

        # Copy the template database to create a new professors.db file
        shutil.copyfile(self.db_template_path, db_path)

        # Update the database path to the new database
        self.db_path = db_path

        # Connect to the new database and create a DataFrame from JSON data
        with sqlite3.connect(db_path) as conn:
            df = pd.DataFrame(data)
            df.to_sql(self.table_name, conn, if_exists="append", index=False)

        return data, db_path


# Contents of prompts.py
# Template source: https://www.reddit.com/r/gradadmissions/comments/oeabbf/the_az_of_contacting_professors_for_graduate/


# Information about the student
student_info = {
    "Name": "Mary Mambo",
    "Gender": "Female",
    "Date of Birth": "03/03/1997",
    "Nationality": "Cameroonian",
    "Contact": {"Phone": "+237676292112", "Email": "mambomary33@gmail.com"},
    "Personal Statement": "A dedicated and result-driven professional with a profound interest in food and development economics. My motivation stems from a deep-seated desire to address economic development crises in developing countries, with a focus on examining cultural and political institutions and their impact on ordinary people. I am passionate about applying theoretical research in practical settings to bridge the gap between academic findings and real-world applications, particularly in the areas of economic development and gender equity.",
    "Education": {
        "Postgraduate": {
            "Degree": "MSc Economics Science",
            "University": "University of Bamenda",
            "Grade": "Very Good",
            "Year Graduated": 2019,
            "Key Projects": [
                "Analysis of Microeconomic Trends in Cameroon",
                "Development of Sustainable Economic Models for Rural Communities",
            ],
        },
        "Undergraduate": {
            "Degree": "BSc Economics Science",
            "University": "University of Buea",
            "Grade": "Very Good",
            "Year Graduated": 2016,
            "Honors": "Dean's List for Academic Excellence",
            "Capstone Project": "Evaluating the Impact of Educational Policies on Economic Growth",
        },
        "Teacher Diploma": {
            "Degree": "DIPET 1 (Teacher diploma of technical education first degree)",
            "Institution": "Higher Technical Teachers’ Training College Bambili",
            "Grade": "Very Good",
            "Year Completed": 2019,
            "Specialization": "Economic Theory and Practical Applications in Secondary Education",
        },
        "Secondary Education": {
            "Qualification": "General Certificate of Education (Advanced and Ordinary Levels)",
            "School": "Government High School, Bokwaongo-Buea",
            "Year Completed": 2013,
            "Distinctions": ["Top Performer in Economics and Mathematics"],
        },
        "Primary Education": {
            "Qualification": "First School Leaving Certificate",
            "School": "Catholic School Buea Station",
            "Year Completed": 2006,
            "Achievements": ["Student Council Representative"],
        },
    },
    "Further Education": {
        "Course": "Introduction to Gender Based Violence Eradication Platforms in Schools",
        "Organization": "United Nations for Children Fund (UNICEF)",
        "Year": 2023,
        "Impact": "Developed and implemented a pilot program for integrating GBV awareness into school curriculums in Cameroon, focusing on service delivery, creating safe environments, and emergency response protocols.",
    },
    "Work Experience": [
        {
            "Role": "Teacher",
            "Organization": "Government Technical High School, Manengole",
            "Duration": "2019-Present",
            "Responsibilities": [
                "Planned and executed innovative Economics, Mathematics, and Management lessons, incorporating technology and interactive learning techniques.",
                "Developed and adopted various teaching methods tailored to diverse learning styles, resulting in a 15% increase in student engagement and academic performance.",
                "Enhanced social abilities and learning skills among students through mentorship programs and extracurricular activities.",
            ],
        },
        {
            "Role": "Livelihood Support Officer",
            "Organization": "Women in Action Against Gender Based Violence",
            "Duration": "2019-2020",
            "Responsibilities": [
                "Oversaw technical planning, supervision, and monitoring of public awareness campaigns focused on gender-based violence, reaching over 1,000 community members.",
                "Coordinated effectively with municipalities, local authorities, and beneficiaries in the Nguti community to implement sustainable livelihood programs.",
            ],
        },
        {
            "Role": "Marketing Intern",
            "Organization": "CAMPOST",
            "Duration": "2017-2019",
            "Responsibilities": [
                "Played a key role in developing data collection tools such as surveys, which contributed to a 10% improvement in customer targeting strategies.",
                "Collected and analyzed data to identify consumer trends, providing insights that led to a 5% increase in marketing campaign effectiveness.",
                "Created detailed graphic representations of data, facilitating better decision-making in marketing strategies.",
            ],
        },
    ],
    "Skills": {
        "Organizational/Managerial": ["Leadership", "Interpersonal skills"],
        "Digital": [
            "Proficient in Office Suite",
            "Advanced user of Statistical Software (SPSS, STATA)",
        ],
        "Other": [
            "Skilled in Graphics Design using Adobe Suite",
            "Effective Team Collaboration",
            "Exceptional Time Management",
            "High Adaptability in Dynamic Environments",
            "Creative Fashion Designing",
        ],
    },
    "Languages": {
        "English": "Fluent",
        "French": "Good, used in professional settings",
        "Ngemba": "Native speaker",
    },
    "Interests": [
        "Development Economics",
        "Educational Economics",
        "Gender Studies",
        "Sustainable Development",
        "Public Policy and Administration",
        "Global Health Economics",
        "Agricultural Economics",
        "Social Research and Statistics",
        "International Relations",
        "Environmental Economics",
        "Urban and Regional Planning",
        "Social Entrepreneurship",
        "Economic Policy",
        "Human Resource Development",
        "Nonprofit Management and Leadership",
    ],
    "Additional Information": {
        "Dissertation": "Role of Women Empowerment in Economic Development in Cameroon: A comprehensive study analyzing the impact of female participation in the workforce and leadership roles on economic growth.",
        "Seminars": "Active participant and presenter in 'The Role of Educational Planning in Agricultural Development' seminar, focusing on integrating educational policies into sustainable agricultural practices.",
        "Memberships": [
            "Active Member of the Cameroon Teachers Trade Union, contributing to policy development",
            "Co-founder of the Youth Development Network Club, focusing on economic empowerment initiatives for young adults.",
        ],
    },
}


perplexity_system_msg = "Provide a thorough, highly detailed, nuanced and comprehensive response to the following question:"

student_email_advice = """Email Template for Reaching Out to Professors

                            Subject: Inquiry Regarding Research Opportunities in [Your Area of Interest]

                            Dear Professor XXXX,

                            [Your Introduction]
                            - Briefly introduce yourself, including your current academic or professional status. 

                            [Your current position and prior work]
                            - Mention your current role and highlight 1-2 key achievements or experiences, particularly those where you demonstrated skills in writing scientific manuscripts and proposing creative, logical research ideas.

                            [Connection to the Professor’s Work]
                            - Explain what led you to the professor's research and their group. Articulate how your research ideas link to their work, showing an understanding of relevant literature and hypotheses. Mention specific works or projects (with URLs if available) that align with your interests.

                            [Questions for the Professor]
                            - Pose 2-3 well-thought-out questions that indirectly address your real concerns, showcasing your readiness to contribute effectively to their research. For example:
                            1. Are you currently looking for new graduate students for the upcoming academic year?
                            2. Which department or program would be most suitable for someone aiming to work in your lab, considering my background and research interests?
                            3. What qualities or skills do you value most in your students, particularly in terms of research creativity and writing ability?

                            [Attachment of Resume/CV]
                            - Attach your resume or CV for a more detailed background overview, emphasizing experiences where you successfully linked your research topics to existing literature and paradigms.

                            Closing Remarks
                            - Express your understanding of the investment a faculty member makes in a graduate student and your eagerness to justify this through your contributions.

                            Warm Regards,
                            Your Name
                            [Optional: URL to personal website/Google Scholar/GitHub, etc.]

                            --------------------------------------------------------------------------------

                            Example Email

                            <!DOCTYPE html>
                            <html>
                            <head>
                            </head>
                            <body>
                                <p>Dear Professor XXXX,</p>

                                <p>My name is Raman Dutt, a graduate of XXXX University. <strong>I am currently working</strong> as a research associate at HITI Lab  at Emory University with Professor A  and Professor B. <strong>My research includes applications of deep learning for medical image analysis, with a special focus on domain adaptation and transfer learning</strong> . I have read your <strong>intriguing work</strong> on medical image analysis (such as  example ...) and <strong>I am highly motivated to pursue</strong> an MS/ PhD in Artificial Intelligence. Here are a few questions -</p>
                                
                                <ul>
                                    <li>Are you looking for new graduate students for Fall'21?</li>
                                    <li>Which department should I apply to be able to best work in your lab?</li>
                                    <li>What qualities/ skills do you prefer in a student?</li>
                                </ul>

                                <p><strong>I've attached my resume</strong> to give you more information about my background.</p>

                                <p>Thank you for your consideration!</p>

                                <p>Sincerely,<br>Raman Dutt </p>
                            </body>
                            </html>
                            
                            Always format your email as HTML as shown above. This will ensure that the email is displayed correctly on all devices.
                """

professor_email_advice = """
As an experienced research professor, your task is to provide concise, actionable feedback on a student's email draft. Focus primarily on areas of improvement that can increase the likelihood of a positive response from another professor. Acknowledge the strengths of the email briefly, and then provide specific suggestions on how the student can enhance their message. Your insights should guide the student in refining their approach to be more effective and impactful. Be bluntly and brutally honest, as well as constructive. Check wether or not the email contains irrelevant urls or placeholders. The email will be in HTML format.

Student's email:
"""

subject_line_advice = """Be Concise: Keep the subject line short and to the point. Aim for no more than 50 characters to ensure that the entire subject line is visible on mobile devices.

                        Be Specific: Indicate your main purpose or area of interest. Vague subject lines are less likely to capture attention.

                        Personalize: If possible, include the professor's area of expertise or a relevant keyword from their research to show that the email is tailored to them.

                        Convey Urgency or Relevance: Including time-sensitive words like "Inquiry for Fall 2023 Research Position" can prompt quicker opening.

                        Highlight Unique Value or Interest: Mention something that could set you apart, like a particular skill or achievement relevant to the professor's work.

                        Avoid Spam Triggers: Stay away from overly salesy language or all caps, which can make your email seem like spam.

                        Use Proper Formatting: Proper capitalization and grammar show professionalism and respect for the recipient.

                        Test for Clarity: Ensure that someone unfamiliar with your situation would understand the gist of your email from the subject line alone.
                        
                        Provide all 5 subject lines in a single line separated by commas. For example: Subject Line 1, Subject Line 2, Subject Line 3, Subject Line 4, Subject Line 5"""


# Contents of query_generator.py
import json
from typing import Dict
import google.generativeai as genai


class QueryGenerator:
    def __init__(self, google_api_key: str):
        self.google_api_key = google_api_key

    def generate_search_queries(self, student_info: Dict, professor_info: Dict) -> Dict:
        # Configure the Google Gemini Pro model
        genai.configure(api_key=self.google_api_key)
        model = genai.GenerativeModel("gemini-pro")

        previous_queries = []
        for i in range(1, 6):
            # Join previous queries into a single string
            # Check if previous_queries is empty
            if previous_queries:
                all_previous_queries = ", ".join(previous_queries)
            else:
                all_previous_queries = ""

            prompt = self._prepare_prompt(
                student_info, professor_info, all_previous_queries
            )
            response = model.generate_content(prompt)
            print(f"Query {i}: {response.text}")
            professor_info[f"Search_{i}"] = response.text
            previous_queries.append(response.text)

        return professor_info

    def _generate_new_query(
        self, student_info: Dict, professor_info: Dict, previous_queries: str
    ) -> str:
        # Construct prompt based on student and professor info, including all previous queries
        print("professor_info", professor_info)
        prompt = (
            f"Professor Info: {json.dumps(professor_info)}\n"
            f"Previous Queries: {previous_queries}\n"
            "Create a search query, unique from those above, to explore the professor's research/interests in depth. Format as a question or statement, including the professor's name, position, and Campus. The query should aim to uncover detailed insights into the professor's academic contributions and interests."
            "Example 1: What are the key research areas and contributions of [professor's name], [position] in the [Department] at [Campus]?"
            "Example 2: Identify and summarize the top 3 research interests of [professor's name] at [Campus], focusing on their impact and relevance in their field."
            "Example 3: List and provide detailed summaries of the top 5 most cited papers by [professor's name] from [Campus], highlighting their significance in the academic community."
            "Your query should be direct and aimed at gathering comprehensive information about the professor's academic profile and research achievements. You are encouraged to be creative with your approach."
        )
        return prompt

    def use_predefined_query(self, professor_info: Dict) -> Dict:
        # Append predefined queries to the professor_info dictionary
        queries = [
            f"What are the key research areas and contributions of {professor_info['Employee']}, {professor_info['Position']} in the {professor_info['Department']} at {professor_info['Campus']}?",
            f"Search for and summarize research interests of {professor_info['Employee']} at {professor_info['Campus']}, focusing on their impact and relevance in their field.",
            f"Search for and provide detailed summaries of publications by {professor_info['Employee']} from {professor_info['Campus']}. Provide URLs to the works as well as their titles if available.",
        ]

        # Assuming there are no existing search queries in the professor_info
        for i, query in enumerate(queries, start=1):
            professor_info[f"Search_{i}"] = query

        return professor_info


# Contents of search_executor.py
import requests
import json
from typing import Dict
from prompts import perplexity_system_msg


class SearchExecutor:
    """
    Executes search queries and retrieves the results.

    Attributes:
        perplexity_api_key (str): API key for Perplexity AI services.

    Methods:
        perform_search(professor_record: Dict) -> Dict:
            Executes search queries present in the professor record and updates the record with the results.
    """

    def __init__(self, perplexity_api_key: str):
        self.perplexity_api_key = perplexity_api_key
        self.url = "https://api.perplexity.ai/chat/completions"
        # Set the headers with the authorization and content type
        self.headers = {
            "Authorization": f"Bearer {self.perplexity_api_key}",
            "Accept": "application/json",
            "Content-Type": "application/json",
        }

    def perform_search(self, professor_record: Dict) -> Dict:
        for i in range(1, 4):  # replace 2 with 6
            search_key = f"Search_{i}"
            result_key = f"Result_{i}"
            if search_key in professor_record:
                query = professor_record[search_key]
                response = self._execute_query(query)
                professor_record[result_key] = response
        return professor_record

    def _execute_query(self, query: str) -> str:
        payload = {
            "model": "pplx-70b-online",
            "messages": [
                {
                    "role": "system",
                    "content": f"{perplexity_system_msg}",
                },
                {"role": "user", "content": query},
            ],
            "max_tokens": 2000,  # Adjust this value as needed for longer responses
        }
        try:
            # Use the headers from the class attribute
            response = requests.post(self.url, json=payload, headers=self.headers)
            response.raise_for_status()
            response = json.loads(response.text)
            response = response["choices"][0]["message"]["content"]
            print(response)  # For debugging
            return response
        except requests.RequestException as e:
            print(f"Error: {e}")


# Contents of SOP_improver.py
import json
import google.generativeai as genai

# Placeholder for importing SOP examples and initial student SOP
from sop_examples_module import example_sop1, example_sop2, example_sop3, student_cv


class SOPImprover:
    def __init__(self, api_key: str):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel("gemini-pro")

    def initial_feedback(self, student_sop: str) -> str:
        """Step 1: Generate initial feedback on the student's SOP."""
        prompt = (
            f"You are provided with some sample SOP's and feedback, and a student's SOP. "
            f"Provide comments/useful feedback for the student's SOP. The comments should be brief and should be presented in the following format "
            f"[.. snippet of the text where comment most applies], Comment \n\n"
            f"Examples and guidance: \n"
            f"[Example SOP 1: {example_sop1}]\n"
            f"[Example SOP 2: {example_sop2}]\n"
            f"[Example SOP 3: {example_sop3}]\n"
            f"[Student's actual SOP: {student_sop}] for analysis and feedback."
        )
        return self.model.generate_content(prompt).text

    def brutally_honest_feedback(self, student_sop: str) -> str:
        """Step 2: Generate brutally honest feedback."""
        prompt = "Be more brutally honest."
        return self.model.generate_content(prompt).text

    # modify this to use content from the student's CV in addition to the SOP
    def brainstorm_enhancement(self, context: str) -> str:
        """Step 3 & 4: Brainstorming for SOP enhancement."""
        prompt = (
            "Extrapolate from the context given to brainstorm specific facts, narratives, or extra details that would help resolve each of the comments. "
            f"Provide reflection on what to provide and why, then provide the info. You may also use information from the student's cv directly or augmented if it would be helpful. \n\n"
            f"Student CV: {student_cv}\n\n"
            f"Initial and more brutally honest feedback: {context}"
        )
        return self.model.generate_content(prompt).text

    def create_improved_sop(self, context: str) -> str:
        """Step 5: Create an improved SOP."""
        prompt = (
            "You are provided with an SOP some comments on it and some proposed refinements reflect on how all the provided elements can come together to produce an improved SOP for the student that adresses all the provided comments and improves the sop overall:\n\n"
            f"SOP, Comments and proposed refinements: {context}"
        )
        return self.model.generate_content(prompt).text

    def compare_sop_versions(self, sop_version1: str, sop_version2: str) -> str:
        """Step 6: Compare two SOP versions."""
        prompt = (
            "You are provided with two versions of an SOP. Decide which one is better. Output a 1 if version 1 is better and 2 if version 2 is better. Do-not output any other characters\n\n"
            f"Version 1 SOP Content: {sop_version1}\n"
            f"Version 2 SOP Content: {sop_version2}"
        )
        return self.model.generate_content(prompt).text

    def enhance_chosen_sop(self, chosen_sop: str, feedback_points: str) -> str:
        """Step 7: Enhance the chosen SOP."""
        prompt = (
            "Now you are the student. Enhance the chosen SOP according to the 8 points of feedback below. "
            f"Where additional information is needed is needeed such as extra details, goals, personal insight, fabricate it intelligently. cleaving as close to the original content and plausibility as possible. Provide the full modified SOP version 1, minimally altered to completely address all the points below.\n\n"
            f"Chosen SOP: {chosen_sop}\n"
            f"Feedback Points: {feedback_points}"
            "NB: This is the final SOP that will be sent to the professor. Do not include any comments, placeholders or notes. Do the best with what you have."
        )
        return self.model.generate_content(prompt).text

    def final_comparison(self, sop_version1: str, sop_version2: str) -> str:
        """Step 8: Final comparison and conclusion."""
        prompt = (
            "You are provided with two versions of an SOP. Return the one which is better verbatim.\n\n"
            f"Version 1 SOP Content: {sop_version1}\n"
            f"Version 2 SOP Content: {sop_version2}"
            "NB: This is the final SOP that will be sent to the professor. Do not include any comments, placeholders or notes. Do the best with what you have."
        )
        return self.model.generate_content(prompt).text

    def process_sop(self, student_sop: str) -> str:
        """Process the SOP through all the steps."""
        # Step 1: Initial Feedback
        initial_feedback = self.initial_feedback(student_sop)

        # Step 2: Brutally Honest Feedback
        honest_feedback = self.brutally_honest_feedback(student_sop)

        # Step 3 & 4: Brainstorming for Enhancement
        # Consider providing just the honest feedback as context
        brainstorm_context = f"{initial_feedback}\n\n{honest_feedback}"
        brainstormed_ideas = self.brainstorm_enhancement(brainstorm_context)

        # Step 5: Creating an Improved SOP
        improved_sop_context = f"{student_sop}\n\n{brainstormed_ideas}"
        improved_sop = self.create_improved_sop(improved_sop_context)

        # Step 6: Comparison of Two SOP Versions
        comparison_result = self.compare_sop_versions(
            f"Version 1: {student_sop}", f"Version 2: {improved_sop}"
        )

        # Step 7: Enhance Chosen SOP
        # Comparison result will either be 1 or 2. Provide the corresponding SOP version be parsing the comparison result.
        if comparison_result == "1":
            enhanced_sop = self.enhance_chosen_sop(student_sop, comparison_result)
        elif comparison_result == "2":
            enhanced_sop = self.enhance_chosen_sop(improved_sop, comparison_result)

        # Step 8: Final Comparison
        final_comparison = self.final_comparison(enhanced_sop, improved_sop)

        return final_comparison


# Example usage
def main():
    key_path = r"C:\Users\bnsoh2\OneDrive - University of Nebraska-Lincoln\Documents\keys\api_keys.json"
    with open(key_path) as f:
        api_keys = json.load(f)
        GEMINI_API_KEY = api_keys["GEMINI_API_KEY"]

    sop_improver = SOPImprover(GEMINI_API_KEY)

    # Placeholder for Student's Initial SOP
    initial_student_sop = "Placeholder for Student's Initial SOP"

    # Process the SOP through all steps
    final_output = sop_improver.process_sop(initial_student_sop)
    print("Final Output:\n", final_output)


if __name__ == "__main__":
    main()
